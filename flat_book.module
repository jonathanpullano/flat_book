<?php
/**
 * @file
 * This module allows you to flatten all subtrees of a book below a maximum depth.
 * Nodes in the subtree will be displayed on a single page, with a table of contents to
 * allow the user to jump to a particular node on the page. If the user requests
 * a node below the flattened depth he will be redirected to the portion of the flattened
 * page that contains the requested node.
 */


/**
 * Implementation of hook_help().
 */
function flat_book_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flat_book':
      return '<p>' .  t('A module to flatten subtrees of a book below a certain level. Flattened subtrees will display on a single page.' .
                        'The user may jump to individual nodes on the flattened page by using a table of contents at the top of the page.') . '</p>';
  }
}

/**
 * Implementation of hook_init().
 *
 * If the user requests a page that is deeper than the maximum depth, redirect
 * to the ancestor that is at (or above) the maximum depth.
 */
function flat_book_init() {
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) != 'edit') {
    $node = node_load(arg(1));
    //If we are in a book and deeper than the maximum depth
    if (isset($node->book) && $node->book['depth'] > variable_get('flat_book_max_menu_depth', 3)) {
      //Redirect if necessary
      if ($ancestor_nid = flat_book_find_flattened_ancestor($node)) {
        drupal_goto('node/'. $ancestor_nid, NULL, 'booknode-'. $node->nid);
      }
    }
  }
}

/**
 * Looks for the node above this one at the maximum menu depth (if it exists)
 * @param object $node - The node whose ancestor is to be looked up
 * @return mixed - The ancestor nid, or 0 if none were found
 */
function flat_book_find_flattened_ancestor($node) {
  $mlid = $node->book['p' . variable_get('flat_book_max_menu_depth', 3)];
  return $mlid ? db_result(db_query('SELECT nid FROM {book} WHERE mlid = %d', $mlid)) : 0;
}

/**
 * Implementation of hook_nodeapi().
 *
 * Squishes the node and its children into one page.
 *
 */
function flat_book_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // If the node is not in a book, this hook doesn't apply.
  if (isset($node->book)) {
    switch ($op) {
      case 'view':
        // We rely on node_build_content() to generate the HTML for this node,
        // which will invoke all hook_nodeapis for the node (including this one!)
        // The firstrun variable ensures this hook will only be called once,
        // thus preventing infinite recursion.
        static $firstrun = TRUE;
        static $content;
        if ($firstrun) {
          $firstrun = FALSE;
          if ($node->book['depth'] >= variable_get('flat_book_max_menu_depth', 3)) {
            if (!isset($content)) {
              //Check the cache tables
              $content = cache_get('flat_book_node_' . $node->nid);
              if (!empty($content->data)) {
                $content = unserialize($content->data);
              }
              else {
                //Flatten the subtree and cache the result
                $tree = book_menu_subtree_data($node->book);
                $children = _flat_book_export_traverse($tree);
                $content = _flat_book_build_toc($tree) . $node->content['body']['#value'] . $children;
                cache_set('flat_book_node_' . $node->nid, serialize($content), 'cache');
              }
            }

            //Replace the node body with the content we found/created
            $node->content['body']['#value'] = $content;

            if (!variable_get('flat_book_display_book_navigation', 0)) {
              unset($node->content['book_navigation']);
            }
          }
        }
        break;
      case 'update':
      case 'insert':
      case 'delete':
        $nid = flat_book_find_flattened_ancestor($node);
        if ($nid) {
          cache_clear_all('flat_book_node_' . $nid, 'cache');
        }
        break;
    }
  }
}

/**
 * Traverses a book subtree and calls _flat_book_visit on each child page
 * @param <type> $tree  - subtree to traverse
 * @param <type> $depth - the current depth wrt the beginning of traversal
 * @return string - HTML
 */
function _flat_book_export_traverse($tree, $depth = 0) {
  $output = '';
  foreach ($tree as $data) {
    $node = node_load($data['link']['nid'], FALSE); // Do not cache.
    if ($node) {
      $children = '';
      if ($data['below']) {
        $children = _flat_book_export_traverse($data['below'], $depth + 1);
      }
      $output .= _flat_book_visit($node, $children, $depth);
    }
  }
  return $output;
}

/**
 * Generates the HTML for a particular node
 *
 * @param $node
 *   The node to generate output for.
 * @param $children
 *   All the rendered child nodes within the current node.
 * @return
 *   The HTML generated for the given node.
 */
function _flat_book_visit($node, $children, $depth) {
  if ($depth == 0) {
    return $children;
  }

  $node = node_build_content($node, FALSE, FALSE);
  if (!variable_get('flat_book_display_book_navigation', 0)) {
    unset($node->content['book_navigation']);
  }
  $node->body = drupal_render($node->content);

  return theme('flat_book_node_export_html', $node, $children, variable_get('flat_book_max_menu_depth', 3));
}

/**
 * Builds the table of contents, Wikipedia-style. The links are all internal.
 *
 * @param  array $tree
 * @return string
 */
function _flat_book_build_toc($tree) {
  $toc = flat_book_menu_tree_toc($tree);
  if ($toc) {
    return '<div class="table-of-contents"><h1>' . t('Jump To:') . '</h1>'. theme_item_list($toc) .'</div>';
  }
  return '';
}

/**
 * Helper function to build the table of contents. Recursively traverses the tree
 * and builds an array that can be passed to theme_item_list.
 *
 * @param  array $tree
 * @param  integer $depth
 * @return string
 */
function flat_book_menu_tree_toc($tree, $depth = 0, $item_list = array()) {
  if ($tree) {
    if ($depth == 0) {
      // Recurse one level, since we only have one element in the tree.
      $values = array_values($tree);
      return flat_book_menu_tree_toc($values[0]['below'], $depth + 1);
    }

    foreach ($tree as &$subtree) {
      $item['data'] = l($subtree['link']['link_title'], "", array(
        "fragment" => "booknode-{$subtree['link']['nid']}",
        //We need to specify external or the link will go to '/'
        "external" => "TRUE"));
      $item['children'] = flat_book_menu_tree_toc($subtree['below'], $depth + 1);
      $item_list[] = $item;
    }
  }
  return $item_list;
}

/**
 * Implementation of hook_theme().
 */
function flat_book_theme() {
  return array(
    'flat_book_node_export_html' => array(
      'arguments' => array(
        'node' => NULL,
        'children' => NULL,
        'flatten_depth' => NULL,
      ),
      'template' => 'flat-book-node-export-html',
      // Make sure to include the same variables the book theme includes
      'preprocess functions' => array('template_preprocess_book_node_export_html'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function flat_book_menu() {
  $items['admin/settings/flat_book'] = array(
    'title' => 'Flat Book',
    'description' => 'Configuration for Flat Book',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flat_book_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'flat_book.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_block().
 * Ideally we would alter the Book Navigation block provided by the book module.
 * However hook_block_alter does not exist presently. Instead, we provide a
 * seperate Flat Book Navigation block with the needed functionality.
 *
 * @see book_block()
 * from which this is copied.
 */
function flat_book_block($op = 'list', $delta = 0, $edit = array()) {
  $block = array();
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Flat Book navigation');
      $block[0]['cache'] = BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_ROLE;
      return $block;
    case 'view':
      $current_bid = 0;
      if ($node = menu_get_object()) {
        $current_bid = empty($node->book['bid']) ? 0 : $node->book['bid'];
      }
      if (variable_get('flat_book_block_mode', 'all pages') == 'all pages') {
        $block['subject'] = t('Flat Book navigation');
        $book_menus = array();
        $pseudo_tree = array(0 => array('below' => FALSE));
        foreach (book_get_books() as $book_id => $book) {
          if ($book['bid'] == $current_bid) {
            // If the current page is a node associated with a book, the menu
            // needs to be retrieved.
            $tree = menu_tree_all_data($node->book['menu_name'], $node->book);
            flat_book_menu_tree_all_data_alter($tree);
            $book_menus[$book_id] = menu_tree_output($tree);
          }
          else {
            // Since we know we will only display a link to the top node, there
            // is no reason to run an additional menu tree query for each book.
            $book['in_active_trail'] = FALSE;
            $pseudo_tree[0]['link'] = $book;
            $book_menus[$book_id] = menu_tree_output($pseudo_tree);
          }
        }
        $block['content'] = theme('book_all_books_block', $book_menus);
      }
      elseif ($current_bid) {
        // Only display this block when the user is browsing a book.
        $title = db_result(db_query(db_rewrite_sql('SELECT n.title FROM {node} n WHERE n.nid = %d'), $node->book['bid']));
        // Only show the block if the user has view access for the top-level node.
        if ($title) {
          $tree = menu_tree_all_data($node->book['menu_name'], $node->book);
          flat_book_menu_tree_all_data_alter($tree);
          // There should only be one element at the top level.
          $data = array_shift($tree);
          $block['subject'] = theme('book_title_link', $data['link']);
          $block['content'] = ($data['below']) ? menu_tree_output($data['below']) : '';
        }
      }
      return $block;
    case 'configure':
      $options = array(
        'all pages' => t('Show block on all pages'),
        'book pages' => t('Show block only on book pages'),
      );
      $form['flat_book_block_mode'] = array(
        '#type' => 'radios',
        '#title' => t('Book navigation block display'),
        '#options' => $options,
        '#default_value' => variable_get('flat_book_block_mode', 'all pages'),
        '#description' => t("If <em>Show block on all pages</em> is selected, the block will contain the automatically generated menus for all of the site's books. If <em>Show block only on book pages</em> is selected, the block will contain only the one menu corresponding to the current page's book. In this case, if the current page is not in a book, no block will be displayed. The <em>Page specific visibility settings</em> or other visibility settings can be used in addition to selectively display this block."),
        );
      return $form;
    case 'save':
      variable_set('flat_book_block_mode', $edit['flat_book_block_mode']);
      break;
  }
}

/**
 * Alters a menu tree to chop off the portions that are below the max menu depth
 * @param array $tree - output from the menu_tree_all_data function
 */
function flat_book_menu_tree_all_data_alter(&$tree) {
  if ($tree) {
    foreach ($tree as &$subtree) {
      if ($subtree['link']['depth'] >= variable_get('flat_book_max_menu_depth', 3)) {
        $subtree['link']['has_children'] = 0; // Required to remove the arrow.
        $subtree['below'] = FALSE; // Chops the tree down.
      }
      else {
        flat_book_menu_tree_all_data_alter($subtree['below']);
      }
    }
  }
}
